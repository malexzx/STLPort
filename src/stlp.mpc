project (stlp_ia64) {
  includes += .  ../stlport
  libout = .obj
  macros += _STLP_STD_NAME=stlp
  specific(gnuace) {
      compile_flags += -fPIC
      linkflags += -fPIC
  }
  staticname = stlport_ia64
  sharedname = 
  Source_Files {
     eh_globals_ia64.cpp
  }
  verbatim(gnuace, local) {
     OCFLAGS = -O2
     FLAGS_C_CC := $(subst -Wpointer-arith,,$(FLAGS_C_CC)) -Wno-unused -pthread
      ifeq ($(shell uname),HP-UX)
        ifeq ($(shell uname -m),ia64)
	"all: .obj/libsupc++m1.a"
	".obj/libsupc++m1.a: .obj/eh_globals_ia64.o"
	"	cp $(shell ${CXX} -mlp64 ${CXXFLAGS} -print-file-name=libsupc++.a) .obj/libsupc++m.a &&\\"
	"	$(AR) d .obj/libsupc++m.a eh_globals.o &&\\"
	"	$(AR) r .obj/libsupc++m.a .obj/eh_globals_ia64.o &&\\"
	"	mv .obj/libsupc++m.a .obj/libsupc++m1.a &&\\"
	"	cd .obj && $(AR) xo libsupc++m1.a"
        endif
      endif # HP-UX
  }
}

project (stlp_aux) {
  includes += .  ../stlport
  libout = .obj
  macros += _STLP_STD_NAME=stlp
  specific(gnuace) {
      compile_flags += -fPIC
      linkflags += -fPIC
  }
  staticname = stlport_aux
  sharedname = 
  Source_Files {
     c_locale.c
     cxa.c
  }
  verbatim(gnuace, local) {
     OCFLAGS = -O2
     FLAGS_C_CC := $(subst -Wpointer-arith,,$(FLAGS_C_CC)) -Wno-unused -pthread
  }
}
project (stlp_p)  {
  sharedname = stlport 
  includes += . ../stlport
  libout = ../lib
  macros += _STLP_STD_NAME=stlp
  version = 5.2.1
  specific (nmake) {
   Debug::compile_flags   = /nologo /W4 /EHsc /Zm800  /MDd /Zi /Zc:wchar_t
   Release::compile_flags = /nologo /W4 /EHsc /Zm800  /MD  /Zi /Zc:wchar_t /GL  
   Debug::link_options    = /fixed:no /nologo /debug /version:5.2 /dll
   Release::link_options  = /fixed:no /nologo /debug /LTCG /version:5.2 /dll
   Debug::macros += COMP=vc9 BUILD=d _DEBUG  
   Release::macros +=  NDEBUG 
   macros += _WIN32_WINNT=0x0501 WINVER=0x0501  WIN32 _WINDOWS 
   sharedname   = stlport.5.2 
  }
        
  specific(gnuace) {
      compile_flags += -fPIC -fuse-cxa-atexit  
      linkflags += -fPIC -pthread
      after += stlp_aux stlp_ia64
      libpaths += .obj
  }
  
  verbatim(gnuace, local) {
      LIBS =
      OCCFLAGS = -O2
      FLAGS_C_CC := $(subst -Wpointer-arith,,$(FLAGS_C_CC)) -Wno-unused

      ifeq ($(shell uname),Linux)
        CCFLAGS := $(subst -fno-strict-aliasing,,$(CCFLAGS))  -fvisibility=hidden -fexceptions -pthread 
        SOFLAGS := $(subst -O3,-O2,$(SOFLAGS)) -fvisibility=hidden -fexceptions -pthread
        LDFLAGS := $(subst -lgcc_eh,,$(LDFLAGS))
        LDFLAGS := $(subst -lsupc++,,$(LDFLAGS))
        LDFLAGS += -Wl,--whole-archive -lstlport_aux -lsupc++ -lgcc_eh -Wl,--no-whole-archive $(END_OBJ)
      endif # Linux
      ifeq ($(shell uname),HP-UX)
        CCFLAGS := $(subst -fno-strict-aliasing,,$(CCFLAGS))   -fexceptions -pthread
        FLAGS_C_CC := $(subst -Wpointer-arith,,$(FLAGS_C_CC)) -Wno-unused -pthread
        SOFLAGS := $(subst -O3,-O2,$(SOFLAGS))  -fexceptions -pthread
        ifeq ($(shell uname -m),ia64)
          LDFLAGS +=  -Wl,-Fl,.obj/libstlport_aux.a  -Wl,-Fl,.obj/libsupc++m1.a -Wl,+b,/usr/lib $(END_OBJ)
        else
	  LDFLAGS += -Wl,-Fl,.obj/libstlport_aux.a -Wl,-Fl,$(shell ${CXX} -mlp64 ${CXXFLAGS} -print-file-name=libsupc++.a) $(END_OBJ)
        endif
      endif # HP-UX
      ifeq ($(shell uname),SunOS)
       CCFLAGS += -D_REENTRANT -D_STLP_NO_SPARC_SOLARIS_THREADS -pthread
       LDFLAGS := $(subst "-z now",,$(LDFLAGS)) -pthread
       LDFLAGS += -Wl,-zallextract -lstlport_aux -lsupc++ -lgcc_eh -Wl,-zdefaultextract  $(END_OBJ)
      endif # SunOS
  }
                    
  Resource_Files {
      stlport.rc
  }
  
  Source_Files {
     dll_main.cpp
     fstream.cpp
     strstream.cpp
     sstream.cpp
     ios.cpp
     stdio_streambuf.cpp
     istream.cpp
     ostream.cpp
     iostream.cpp
     codecvt.cpp
     collate.cpp
     ctype.cpp
     monetary.cpp
     num_get.cpp
     num_put.cpp
     num_get_float.cpp
     num_put_float.cpp
     numpunct.cpp
     time_facets.cpp
     messages.cpp
     locale.cpp
     locale_impl.cpp
     locale_catalog.cpp
     facets_byname.cpp
     complex.cpp
     complex_io.cpp
     complex_trig.cpp
     string.cpp
     bitset.cpp
     allocators.cpp
     
     conditional(nmake) {
      c_locale.c
      cxa.c
     }
  }
}


